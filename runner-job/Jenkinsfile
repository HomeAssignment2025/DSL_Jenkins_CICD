pipeline {
    agent any

    parameters {
        string(name: 'API_IMAGE', defaultValue: 'youruser/flask-docker-api:latest', description: 'Flask API image to run')
        string(name: 'NGINX_IMAGE', defaultValue: 'youruser/nginx-proxy:latest', description: 'Nginx proxy image to run')
    }

    environment {
        NETWORK_NAME     = 'ci-cd-test-network'
        FLASK_CONTAINER  = 'flask-api'
        NGINX_CONTAINER  = 'nginx-proxy'
        NGINX_PORT       = '8080'
    }

    stages {
        stage('Create Network') {
            steps {
                sh "docker network create ${env.NETWORK_NAME} || true"
            }
        }

        stage('Run Flask API') {
            steps {
                sh """
                docker run -d --rm \
                    --name ${env.FLASK_CONTAINER} \
                    --network ${env.NETWORK_NAME} \
                    ${params.API_IMAGE}
                """
            }
        }

        stage('Run Nginx Proxy') {
            steps {
                sh """
                docker run -d --rm \
                    --name ${env.NGINX_CONTAINER} \
                    --network ${env.NETWORK_NAME} \
                    -p ${env.NGINX_PORT}:80 \
                    ${params.NGINX_IMAGE}
                """
            }
        }

        stage('Verify Communication') {
            steps {
                script {
                    sleep 5  // Allow containers to start
                }
                sh """
                echo "Checking if Nginx proxy routes to Flask API..."
                curl -s --fail http://localhost:${env.NGINX_PORT}/api/containers | jq '.' || exit 1
                """
            }
        }
    }

    post {
        always {
            echo 'Cleaning up containers and network...'
            sh """
            docker stop ${env.NGINX_CONTAINER} || true
            docker stop ${env.FLASK_CONTAINER} || true
            docker network rm ${env.NETWORK_NAME} || true
            """
        }
    }
}
